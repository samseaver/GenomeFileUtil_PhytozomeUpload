# -*- coding: utf-8 -*-
import unittest
import os  # noqa: F401
import json  # noqa: F401
import time
import shutil
import re
import sys
import datetime
import collections
#import simplejson

from os import environ
try:
	from ConfigParser import ConfigParser  # py2
except:
	from configparser import ConfigParser  # py3

from pprint import pprint  # noqa: F401

from GenomeFileUtil.GenomeFileUtilImpl import GenomeFileUtil
from GenomeFileUtil.core.GenomeInterface import GenomeInterface
from GenomeFileUtil.GenomeFileUtilImpl import SDKConfig
from GenomeFileUtil.GenomeFileUtilServer import MethodContext
from GenomeFileUtil.core.FastaGFFToGenome import FastaGFFToGenome
from installed_clients.DataFileUtilClient import DataFileUtil
from installed_clients.WorkspaceClient import Workspace as workspaceService

class FastaGFFToGenomeUploadTest(unittest.TestCase):

	@classmethod
	def setUpClass(cls):
		print('setting up class')
		token = environ.get('KB_AUTH_TOKEN', None)
		cls.ctx = MethodContext(None)
		cls.ctx.update({'token': token,
						'provenance': [
							{'service': 'GenomeFileUtil',
							 'method': 'please_never_use_it_in_production',
							 'method_params': []
							 }],
						'authenticated': 1})

		config_file = environ.get('KB_DEPLOYMENT_CONFIG', None)
		cls.cfg = {}
		config = ConfigParser()
		config.read(config_file)
		for nameval in config.items('GenomeFileUtil'):
			cls.cfg[nameval[0]] = nameval[1]

		cls.wsURL = cls.cfg['workspace-url']
		cls.wsClient = workspaceService(cls.wsURL, token=token)
		cls.serviceImpl = GenomeFileUtil(cls.cfg)

		cls.dfu = DataFileUtil(os.environ['SDK_CALLBACK_URL'], token=token)
		cls.scratch = cls.cfg['scratch']
		cls.shockURL = cls.cfg['shock-url']
		cls.gfu_cfg = SDKConfig(cls.cfg)
		cls.wsName = "Phytozome_Genomes"
#		 cls.wsName = "Athaliana_Test"
#		 cls.wsName = "sunita:narrative_1568652277639"
		cls.prepare_data()

#	 @classmethod
#	 def tearDownClass(cls):
#		 if hasattr(cls, 'wsName'):
#			 cls.wsClient.delete_workspace({'workspace': cls.wsName})
#			 print('Test workspace was deleted')

	def getWsClient(self):
		return self.__class__.wsClient

	def getWsName(self):
		if hasattr(self.__class__, 'wsName'):
			return self.__class__.wsName
		suffix = int(time.time() * 1000)
		wsName = "test_GenomeFileUtil_" + str(suffix)
		ret = self.getWsClient().create_workspace({'workspace': wsName})  # noqa
		self.__class__.wsName = wsName
		return wsName

	def getImpl(self):
		return self.__class__.serviceImpl

	def getContext(self):
		return self.__class__.ctx

	@classmethod
	def prepare_data(cls):
#		 cls.wsClient.create_workspace({'workspace': cls.wsName})

		cls.dtn_root = "/kb/module/genomes/Phytozome/"

	def test_single_genome(self):
				
                # Files in data directory
                Fa_Path = os.path.join("data","Taxus_chinensis_var_mairei_scaffold_genome.fasta.gz")
                Gff_Path = os.path.join("data","taxus_chinensis_merge.gff3.gz")
                Genome_Name = "Taxus_chinensis"
                WS_Name = "seaver:narrative_1629867179241"

                input_params = {'fasta_file': {'path': Fa_Path},
                                'gff_file': {'path': Gff_Path},
                                'genome_name': Genome_Name,
                                'workspace_name': WS_Name,
                                'type': 'Reference',
                                'scientific_name': 'Taxus chinensis',
                                'taxon_id': '29808',
                                'genetic_code':1}
                result = self.getImpl().fasta_gff_to_genome(self.getContext(), input_params)[0]
                print(result)
